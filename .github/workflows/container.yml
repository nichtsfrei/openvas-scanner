name: Container

on:
  push:
    branches: [main, stable, oldstable, middleware]
    tags: ["v*"]
  pull_request:
    branches: [main, stable, oldstable, middleware]
  workflow_dispatch:
  repository_dispatch:

jobs:
  nasl-cli-release:
    runs-on:
     - ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      # install rustup
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo apt update && sudo apt-get install -y libpcap-dev
      - run: rustup update stable && rustup default stable
      - run: cargo install cross
      - run: CROSS_CONFIG=Cross.toml cross -v build --release --target aarch64-unknown-linux-gnu
      - run: CROSS_CONFIG=Cross.toml cross build --release --target x86_64-unknown-linux-gnu
      - name: archive nasl-cli aarch64-unknown-linux-gnu
        uses: actions/upload-artifact@v3
        with:
          name: nasl-cli-aarch64
          path: rust/target/aarch64-unknown-linux-gnu/release/nasl-cli
          retention-days: 1
      - name: archive nasl-cli x86_64-unknown-linux-gnu
        uses: actions/upload-artifact@v3
        with:
          name: nasl-cli-amd64
          path: rust/target/x86_64-unknown-linux-gnu/release/nasl-cli
          retention-days: 1
  production-image:
    runs-on: ubuntu-latest
    needs: [nasl-cli-release]
    strategy:
      matrix:
        platform:
          - amd64
          - aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'enable tag: version'
        run: |
          echo "ENABLE_VERSION=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}" >> $GITHUB_ENV
          # set defaults
          echo "ENABLE_LATEST=false" >> $GITHUB_ENV
          echo "ENABLE_OLDSTABLE=false" >> $GITHUB_ENV
          echo "ENABLE_RETAG_STABLE_OLDSTABLE=false" >> $GITHUB_ENV
      - name: 'set tag related fields ${{ env.ENABLE_VERSION }}'
        if: ( env.ENABLE_VERSION )
        run: |
          # find the latest version that is not ourself
          export LATEST_VERSION=$(git tag -l | grep -v '${{ github.ref_name }}' | sort -r --version-sort)
          # get major minor patch versions
          IFS='.' read -r latest_major latest_minor latest_patch << EOF
          $LATEST_VERSION
          EOF
          IFS='.' read -r tag_major tag_minor tag_patch << EOF
          ${{ github.ref_name }}
          EOF
          # remove leading v
          latest_major=$(echo $latest_major | cut -c2-)
          tag_major=$(echo $tag_major | cut -c2-)
          if [ $tag_major -eq $latest_major ]; then
            # set this tag to latest and stable
            echo "ENABLE_LATEST=true" >> $GITHUB_ENV
          elif [ $tag_major -gt $latest_major ]; then
            # new major version, retag previous stable to oldstable
            echo "ENABLE_LATEST=true" >> $GITHUB_ENV
            echo "ENABLE_RETAG_STABLE_OLDSTABLE=true" >> $GITHUB_ENV
          else
            # set this tag to oldstable
            # can happen on a hotfix
            echo "ENABLE_OLDSTABLE=true" >> $GITHUB_ENV
          fi
      - name: 'Setup meta information (version: ${{ env.ENABLE_VERSION }}, latest: ${{ env.ENABLE_LATEST }}, oldstable: ${{ env.ENABLE_OLDSTABLE }}, retag oldstable : ${{ env.ENABLE_RETAG_STABLE_OLDSTABLE }}'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          labels: |
            org.opencontainers.image.vendor=Greenbone
            org.opencontainers.image.base.name=greenbone/gvm-libs
          flavor: latest=false # no auto latest container tag for git tags
          tags: |
            # use latest for latest tag from stable branch
            # verify if both are active
            type=raw,value=latest,enable=${{ env.ENABLE_LATEST }}
            type=raw,value=stable,enable=${{ env.ENABLE_LATEST }}
            type=raw,value=oldstable,enable=${{ env.ENABLE_OLDSTABLE }}
            type=semver,pattern={{version}},enable=${{ env.ENABLE_VERSION }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ env.ENABLE_VERSION }}
            type=semver,pattern={{major}},enable=${{ env.ENABLE_VERSION }}
            type=edge,branch=main
            # use branch-sha otherwise for pushes to branches other then main (will not be uploaded)
            type=raw,value={{branch}}-{{sha}},enable=${{ github.ref_type == 'branch' && github.event_name == 'push' && github.ref_name != 'main' }}
            # use pr-$PR_ID for pull requests (will not be uploaded)
            type=ref,event=pr
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: nasl-cli-${{ matrix.platform }}
          path: bin/nasl-cli
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && (github.ref_type == 'tag' || github.ref_name == 'main') }}
          file: .docker/prod.Dockerfile
          build-args: |
            REPOSITORY=${{ github.repository }}
          platforms: linux/${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
