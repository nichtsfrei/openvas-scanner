name: Container

on:
  push:
    branches: [main, stable, oldstable, middleware]
    tags: ["v*"]
  pull_request:
    branches: [main, stable, oldstable, middleware]
  workflow_dispatch:
  repository_dispatch:

jobs:
  rs-build-binaries:
    needs: calculate_version
    uses: ./.github/workflows/build-rust.yml

  production-image:
    runs-on: ubuntu-latest
    needs: [rs-build-binaries]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'set IS_VERSION_TAG'
        run: |
          echo "IS_VERSION_TAG=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}" >> $GITHUB_ENV
          # set defaults
          echo "IS_LATEST_TAG=false" >> $GITHUB_ENV
      - name: 'set IS_LATEST_TAG'
        if: ( env.IS_VERSION_TAG )
        run: |
          # find the latest version that is not ourself
          export LATEST_VERSION=$(git tag -l | grep -v '${{ github.ref_name }}' | sort -r --version-sort)
          # get major minor patch versions
          IFS='.' read -r latest_major latest_minor latest_patch << EOF
          $LATEST_VERSION
          EOF
          IFS='.' read -r tag_major tag_minor tag_patch << EOF
          ${{ github.ref_name }}
          EOF
          # remove leading v
          latest_major=$(echo $latest_major | cut -c2-)
          tag_major=$(echo $tag_major | cut -c2-)
          echo "$tag_major >= $latest_major"
          if [[ $tag_major -ge $latest_major && ($tag_minor -ne 0 || $tag_patch -ne 0) ]]; then
            # set this tag to latest and stable
            echo "IS_LATEST_TAG=true" >> $GITHUB_ENV
          fi
      - name: 'Setup meta information (IS_VERSION_TAG: ${{ env.IS_VERSION_TAG }}, IS_LATEST_TAG: ${{ env.IS_LATEST_TAG }} )'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          labels: |
            org.opencontainers.image.vendor=Greenbone
            org.opencontainers.image.base.name=greenbone/gvm-libs
          flavor: latest=false # no auto latest container tag for git tags
          tags: |
            # when IS_LATEST_TAG is set create a stable and a latest tag
            type=raw,value=latest,enable=${{ env.IS_LATEST_TAG }}
            type=raw,value=stable,enable=${{ env.IS_LATEST_TAG }}
            # if tag version is set than create a version tags
            type=semver,pattern={{version}},enable=${{ env.IS_VERSION_TAG }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ env.IS_VERSION_TAG }}
            type=semver,pattern={{major}},enable=${{ env.IS_VERSION_TAG }}
            # if we are on the main branch set edge
            type=edge,branch=main
            # use branch-sha otherwise for pushes to branches other then main (will not be uploaded)
            type=raw,value={{branch}}-{{sha}},enable=${{ github.ref_type == 'branch' && github.event_name == 'push' && github.ref_name != 'main' }}
            # use pr-$PR_ID for pull requests (will not be uploaded)
            type=ref,event=pr
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: rs-binaries
          path: assets
      - run: mv assets/nasl-cli-aarch64-unknown-linux-gnu assets/nasl-cli-aarch64
      - run: mv assets/nasl-cli-x86_64-unknown-linux-gnu assets/nasl-cli-amd64
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && (github.ref_type == 'tag' || github.ref_name == 'main') }}
          file: .docker/prod.Dockerfile
          build-args: |
            REPOSITORY=${{ github.repository }}
          platforms: linux/amd64,linux/aarch64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
